{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { CursorPage } from \"../../../pagination.mjs\";\nexport class Messages extends APIResource {\n  /**\n   * Create a message.\n   */\n  create(threadId, body, options) {\n    return this._client.post(`/threads/${threadId}/messages`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieve a message.\n   */\n  retrieve(threadId, messageId, options) {\n    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Modifies a message.\n   */\n  update(threadId, messageId, body, options) {\n    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  list(threadId, query = {}, options) {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Deletes a message.\n   */\n  del(threadId, messageId, options) {\n    return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n}\nexport class MessagesPage extends CursorPage {}\nMessages.MessagesPage = MessagesPage;","map":{"version":3,"names":["APIResource","isRequestOptions","CursorPage","Messages","create","threadId","body","options","_client","post","headers","retrieve","messageId","get","update","list","query","getAPIList","MessagesPage","del","delete"],"sources":["../../../src/resources/beta/threads/messages.ts"],"sourcesContent":[null],"mappings":"AAAA;SAESA,WAAW,QAAE;SACbC,gBAAgB,QAAE;SAGlBC,UAAU,QAAyB;AAE5C,OAAM,MAAOC,QAAS,SAAQH,WAAW;EACvC;;;EAGAI,MAAMA,CACJC,QAAgB,EAChBC,IAAyB,EACzBC,OAA6B;IAE7B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,YAAYJ,QAAQ,WAAW,EAAE;MACxDC,IAAI;MACJ,GAAGC,OAAO;MACVG,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGH,OAAO,EAAEG;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAC,QAAQA,CAACN,QAAgB,EAAEO,SAAiB,EAAEL,OAA6B;IACzE,OAAO,IAAI,CAACC,OAAO,CAACK,GAAG,CAAC,YAAYR,QAAQ,aAAaO,SAAS,EAAE,EAAE;MACpE,GAAGL,OAAO;MACVG,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGH,OAAO,EAAEG;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAI,MAAMA,CACJT,QAAgB,EAChBO,SAAiB,EACjBN,IAAyB,EACzBC,OAA6B;IAE7B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,YAAYJ,QAAQ,aAAaO,SAAS,EAAE,EAAE;MACrEN,IAAI;MACJ,GAAGC,OAAO;MACVG,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGH,OAAO,EAAEG;MAAO;KAC/D,CAAC;EACJ;EAWAK,IAAIA,CACFV,QAAgB,EAChBW,KAAA,GAAiD,EAAE,EACnDT,OAA6B;IAE7B,IAAIN,gBAAgB,CAACe,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACD,IAAI,CAACV,QAAQ,EAAE,EAAE,EAAEW,KAAK,CAAC;;IAEvC,OAAO,IAAI,CAACR,OAAO,CAACS,UAAU,CAAC,YAAYZ,QAAQ,WAAW,EAAEa,YAAY,EAAE;MAC5EF,KAAK;MACL,GAAGT,OAAO;MACVG,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGH,OAAO,EAAEG;MAAO;KAC/D,CAAC;EACJ;EAEA;;;EAGAS,GAAGA,CAACd,QAAgB,EAAEO,SAAiB,EAAEL,OAA6B;IACpE,OAAO,IAAI,CAACC,OAAO,CAACY,MAAM,CAAC,YAAYf,QAAQ,aAAaO,SAAS,EAAE,EAAE;MACvE,GAAGL,OAAO;MACVG,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,GAAGH,OAAO,EAAEG;MAAO;KAC/D,CAAC;EACJ;;AAGF,OAAM,MAAOQ,YAAa,SAAQhB,UAAmB;AA8nBrDC,QAAQ,CAACe,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}