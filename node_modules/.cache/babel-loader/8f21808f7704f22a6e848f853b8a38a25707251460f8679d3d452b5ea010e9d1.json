{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { sleep } from \"../../../core.mjs\";\nimport { allSettledWithThrow } from \"../../../lib/Util.mjs\";\nimport { VectorStoreFilesPage } from \"./files.mjs\";\nexport class FileBatches extends APIResource {\n  /**\n   * Create a vector store file batch.\n   */\n  create(vectorStoreId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a vector store file batch.\n   */\n  retrieve(vectorStoreId, batchId, options) {\n    return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Cancel a vector store file batch. This attempts to cancel the processing of\n   * files in this batch as soon as possible.\n   */\n  cancel(vectorStoreId, batchId, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Create a vector store batch and poll until all files have been processed.\n   */\n  async createAndPoll(vectorStoreId, body, options) {\n    const batch = await this.create(vectorStoreId, body);\n    return await this.poll(vectorStoreId, batch.id, options);\n  }\n  listFiles(vectorStoreId, batchId, query = {}, options) {\n    if (isRequestOptions(query)) {\n      return this.listFiles(vectorStoreId, batchId, {}, query);\n    }\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, VectorStoreFilesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Wait for the given file batch to be processed.\n   *\n   * Note: this will return even if one of the files failed to process, you need to\n   * check batch.file_counts.failed_count to handle this case.\n   */\n  async poll(vectorStoreId, batchId, options) {\n    const headers = {\n      ...options?.headers,\n      'X-Stainless-Poll-Helper': 'true'\n    };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const {\n        data: batch,\n        response\n      } = await this.retrieve(vectorStoreId, batchId, {\n        ...options,\n        headers\n      }).withResponse();\n      switch (batch.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'cancelled':\n        case 'completed':\n          return batch;\n      }\n    }\n  }\n  /**\n   * Uploads the given files concurrently and then creates a vector store file batch.\n   *\n   * The concurrency limit is configurable using the `maxConcurrency` parameter.\n   */\n  async uploadAndPoll(vectorStoreId, {\n    files,\n    fileIds = []\n  }, options) {\n    if (files == null || files.length == 0) {\n      throw new Error(`No \\`files\\` provided to process. If you've already uploaded files you should use \\`.createAndPoll()\\` instead`);\n    }\n    const configuredConcurrency = options?.maxConcurrency ?? 5;\n    // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n    const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n    const client = this._client;\n    const fileIterator = files.values();\n    const allFileIds = [...fileIds];\n    // This code is based on this design. The libraries don't accommodate our environment limits.\n    // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n    async function processFiles(iterator) {\n      for (let item of iterator) {\n        const fileObj = await client.files.create({\n          file: item,\n          purpose: 'assistants'\n        }, options);\n        allFileIds.push(fileObj.id);\n      }\n    }\n    // Start workers to process results\n    const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n    // Wait for all processing to complete.\n    await allSettledWithThrow(workers);\n    return await this.createAndPoll(vectorStoreId, {\n      file_ids: allFileIds\n    });\n  }\n}\nexport { VectorStoreFilesPage };","map":{"version":3,"names":["APIResource","isRequestOptions","sleep","allSettledWithThrow","VectorStoreFilesPage","FileBatches","create","vectorStoreId","body","options","_client","post","headers","retrieve","batchId","get","cancel","createAndPoll","batch","poll","id","listFiles","query","getAPIList","pollIntervalMs","toString","data","response","withResponse","status","sleepInterval","headerInterval","headerIntervalMs","parseInt","isNaN","uploadAndPoll","files","fileIds","length","Error","configuredConcurrency","maxConcurrency","concurrencyLimit","Math","min","client","fileIterator","values","allFileIds","processFiles","iterator","item","fileObj","file","purpose","push","workers","Array","fill","map","file_ids"],"sources":["../../../src/resources/beta/vector-stores/file-batches.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}