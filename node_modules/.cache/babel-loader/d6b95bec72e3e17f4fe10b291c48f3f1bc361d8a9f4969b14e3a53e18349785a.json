{"ast":null,"code":"var _jsxFileName = \"/home/sangji/repos/AlienExpress/src/Preferences.js\",\n  _s = $RefreshSig$();\nimport './Preferences.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CropPreference() {\n  _s();\n  // State to store the content of the textarea\n  const [text, setText] = useState('Enter your crops');\n\n  // Clear the content when the textarea is clicked\n  const handleClick = () => {\n    setText(''); // Clear the text\n  };\n\n  // Log the current text when the button is clicked\n  const handleLogText = () => {\n    console.log(\"Current text:\", text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preferences flex\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"textBold\",\n      children: \"What crops are you growing?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input\",\n      value: text,\n      onClick: handleClick // Trigger clear on click\n      ,\n      onChange: e => setText(e.target.value) // Update state on change\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogText,\n      children: \"Log Current Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n_s(CropPreference, \"9T6a40B0eqcSA87XvX4nY3uVgFM=\");\n_c = CropPreference;\nfunction Preferences() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top elementContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"instruction textSmall\",\n        children: \"Step 2: Set your preferences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CropPreference, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom elementContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"previous textSmall\",\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next textSmall\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_c2 = Preferences;\nexport default Preferences;\nvar _c, _c2;\n$RefreshReg$(_c, \"CropPreference\");\n$RefreshReg$(_c2, \"Preferences\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CropPreference","_s","text","setText","handleClick","handleLogText","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","onChange","e","target","_c","Preferences","_c2","$RefreshReg$"],"sources":["/home/sangji/repos/AlienExpress/src/Preferences.js"],"sourcesContent":["import './Preferences.css';\nimport React, { useState } from 'react';\n\nfunction CropPreference() {\n    // State to store the content of the textarea\n    const [text, setText] = useState('Enter your crops');\n\n    // Clear the content when the textarea is clicked\n    const handleClick = () => {\n        setText(''); // Clear the text\n    };\n\n    // Log the current text when the button is clicked\n    const handleLogText = () => {\n        console.log(\"Current text:\", text);\n    };\n\n    return (\n        <div className=\"preferences flex\">\n            <p className=\"textBold\">What crops are you growing?</p>\n            <textarea\n                className=\"input\"\n                value={text}\n                onClick={handleClick} // Trigger clear on click\n                onChange={(e) => setText(e.target.value)} // Update state on change\n            />\n            <button onClick={handleLogText}>Log Current Text</button>\n        </div>\n    );\n}\n\nfunction Preferences() {\n    return (\n        <div className=\"content\">\n            <div className=\"top elementContainer\">\n                <p className=\"instruction textSmall\">Step 2: Set your preferences</p>\n            </div>\n            <CropPreference />\n            <div className=\"bottom elementContainer\">\n                <button className=\"previous textSmall\">Previous</button>\n                <button className=\"next textSmall\">Next</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Preferences;\n"],"mappings":";;AAAA,OAAO,mBAAmB;AAC1B,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,kBAAkB,CAAC;;EAEpD;EACA,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACtBD,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAME,aAAa,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,IAAI,CAAC;EACtC,CAAC;EAED,oBACIH,OAAA;IAAKS,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BV,OAAA;MAAGS,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACvDd,OAAA;MACIS,SAAS,EAAC,OAAO;MACjBM,KAAK,EAAEZ,IAAK;MACZa,OAAO,EAAEX,WAAY,CAAC;MAAA;MACtBY,QAAQ,EAAGC,CAAC,IAAKd,OAAO,CAACc,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACFd,OAAA;MAAQgB,OAAO,EAAEV,aAAc;MAAAI,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEd;AAACZ,EAAA,CA1BQD,cAAc;AAAAmB,EAAA,GAAdnB,cAAc;AA4BvB,SAASoB,WAAWA,CAAA,EAAG;EACnB,oBACIrB,OAAA;IAAKS,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACpBV,OAAA;MAAKS,SAAS,EAAC,sBAAsB;MAAAC,QAAA,eACjCV,OAAA;QAAGS,SAAS,EAAC,uBAAuB;QAAAC,QAAA,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,eACNd,OAAA,CAACC,cAAc;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClBd,OAAA;MAAKS,SAAS,EAAC,yBAAyB;MAAAC,QAAA,gBACpCV,OAAA;QAAQS,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxDd,OAAA;QAAQS,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACQ,GAAA,GAbQD,WAAW;AAepB,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}